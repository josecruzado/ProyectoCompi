import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author JOSE
 */

public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    private String path, text;
    private boolean guardado;
    final String pathTemp = "D:\\\\UNIVERSIDAD\\\\CICLO 8\\\\COMPI\\\\T2\\\\CD\\\\codeTemp.txt";
    NumeroLinea numeroLinea;
    
    public MainForm() {
        initComponents();
        path = "";
        text = "";
        guardado = false;
        setLayout(new BorderLayout());
        numeroLinea= new NumeroLinea(textArea);
        scrollPane.setRowHeaderView(numeroLinea);
        
        add(scrollPane,BorderLayout.CENTER);
        add(spComentarios,BorderLayout.SOUTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        spComentarios = new javax.swing.JScrollPane();
        tablaResultados = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuNuevo = new javax.swing.JMenuItem();
        menuAbrir = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        menuGuardarComo = new javax.swing.JMenuItem();
        menuEjecutar = new javax.swing.JMenu();
        menuAnalizarLexico = new javax.swing.JMenuItem();
        menuAyuda = new javax.swing.JMenu();
        menuAcerdaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Analizador Léxico");
        setLocation(new java.awt.Point(720, 250));

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        textArea.setForeground(new java.awt.Color(0, 0, 255));
        textArea.setRows(5);
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textAreaKeyTyped(evt);
            }
        });
        scrollPane.setViewportView(textArea);

        spComentarios.setBackground(new java.awt.Color(255, 255, 255));
        spComentarios.setPreferredSize(new java.awt.Dimension(166, 150));

        tablaResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "Lexema"
            }
        ));
        tablaResultados.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tablaResultados.setEnabled(false);
        spComentarios.setViewportView(tablaResultados);

        menuArchivo.setText("Archivo");

        menuNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuNuevo.setText("Nuevo");
        menuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(menuNuevo);

        menuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuAbrir.setText("Abrir");
        menuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(menuAbrir);

        menuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuGuardar.setText("Guardar");
        menuGuardar.setEnabled(false);
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(menuGuardar);

        menuGuardarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuGuardarComo.setText("Guardar como...");
        menuGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarComoActionPerformed(evt);
            }
        });
        menuArchivo.add(menuGuardarComo);

        menuBar.add(menuArchivo);

        menuEjecutar.setText("Ejecutar");

        menuAnalizarLexico.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        menuAnalizarLexico.setText("Analizar Léxico");
        menuAnalizarLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAnalizarLexicoActionPerformed(evt);
            }
        });
        menuEjecutar.add(menuAnalizarLexico);

        menuBar.add(menuEjecutar);

        menuAyuda.setText("Ayuda");

        menuAcerdaDe.setText("Acerca de");
        menuAcerdaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAcerdaDeActionPerformed(evt);
            }
        });
        menuAyuda.add(menuAcerdaDe);

        menuBar.add(menuAyuda);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
                    .addComponent(spComentarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spComentarios, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuAcerdaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAcerdaDeActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Analizador Léxico \n" + 
                                            "Versión 2.0 \n" +
                                            "Copyright © 2020");
    }//GEN-LAST:event_menuAcerdaDeActionPerformed

    private void menuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNuevoActionPerformed
        // TODO add your handling code here:
        if(!guardado && JOptionPane.showConfirmDialog(null, "El archivo no esta guardado.\n" 
                                            + " Se perderan los ultimos cambios."
                                            + "\n¿Desea continuar?") != JOptionPane.YES_OPTION){
            return;
        }
        textArea.setText("");
        
        guardado = false;
        text = "";
        path = "";
        //textAreaComentarios.setText("");
        
        menuGuardar.setEnabled(false);
        setTitle("nuevo.txt");
        System.out.println("Guardado " + guardado);
    }//GEN-LAST:event_menuNuevoActionPerformed

    private void menuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirActionPerformed
        // TODO add your handling code here:
        if(!guardado && JOptionPane.showConfirmDialog(null, "El archivo no esta guardado.\n" 
                                            + " Se perderan los ultimos cambios."
                                            + "\n¿Desea continuar?") != JOptionPane.YES_OPTION){
            return;
        }
                
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            path = fileChooser.getSelectedFile().getAbsolutePath();
  
            try {
                textArea.setText("");
                List<String> lines = Files.readAllLines(Paths.get(path));
               
                lines.stream().forEach((line) -> {
                    textArea.append(line + "\n");
                });
                setTitle(fileChooser.getSelectedFile().getName());
                
                guardado = true;
                text = textArea.getText();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Ocurrió un error al intentar abrir el archivo " + fileChooser.getSelectedFile().getName());
            }
        }        
        
        menuGuardar.setEnabled(!guardado && !path.equals(""));
        System.out.println("Guardado Abrir " + guardado);
    }//GEN-LAST:event_menuAbrirActionPerformed
    
    private void hacerCopiaAux() throws IOException{
        //Hacemos una copia auxiliar del archivo y la guardamos en:
        //D:\\Documentos\\UPN\\CICLO VI\\COMPI\\Semana 12 - T2\\codeTemp.txt
        File file = new File(pathTemp);
        FileWriter writer = null;
        try {
            writer = new FileWriter(file);
            writer.write(textArea.getText());

        } catch (IOException ex) {
            throw ex;
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                throw ex;
            }
        }
    }
            
    private void menuAnalizarLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAnalizarLexicoActionPerformed
        // TODO add your handling code here:
        //textAreaComentarios.setText("");
        DefaultTableModel model = (DefaultTableModel) tablaResultados.getModel();        
        model.setRowCount(0);
        
        try {
            hacerCopiaAux();
            
            Process p  = Runtime.getRuntime().exec("D:/UNIVERSIDAD/CICLO 8/COMPI/T2/CD/Scanner.exe");
            
            InputStream is = p.getInputStream();
            BufferedReader br = new BufferedReader (new InputStreamReader (is));
            System.out.println("");
            String str = "", aux;
            while((aux = br.readLine()) != null){
               str += aux + " ";
            }
            //System.out.println(str);
            
            if(!str.isEmpty()){
                Object[] filas = str.split("~");
                for (int i = 0; i < filas.length - 1; i++){
                    System.out.println("->" + filas[i].toString());
                    if(i % 2 == 0){
                        filas[i] = Token.toString(filas[i].toString().trim());
                        System.out.println("-->"+filas[i].toString());
                        if(filas[i].toString().equals(Token.ERROR)){
                            String[] lexema = filas[i+1].toString().trim().split(" ");;
                            filas[i] = filas[i].toString() + " " + lexema[0];
                            filas[i+1] = lexema[1];
                            System.out.println(lexema[0] + "/" + lexema[1]);
                        }
                    }
                    else{
                        Object[] fila = {filas[i-1],filas[i]};
                        model.addRow(fila);
                    }
                }
            }
            
            tablaResultados.setDefaultRenderer(tablaResultados.getColumnClass(0), new ColorRows());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error al intentar analizar el archivo");
        }
    }//GEN-LAST:event_menuAnalizarLexicoActionPerformed

    private void menuGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarComoActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if(fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
            File file =  fileChooser.getSelectedFile();
            FileWriter writer = null;
            try {
                writer = new FileWriter(file);
                writer.write(textArea.getText());
                
                path = file.getAbsolutePath();
                guardado = true;
                text = textArea.getText();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Ocurrió un error al intentar guardar el archivo");
            } finally {
                try {
                    writer.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Ocurrió un error al intentar cerrar el archivo");
                }
            }
        }
        
        menuGuardar.setEnabled(!guardado && !path.equals(""));
        
        System.out.println("Guardado " + guardado);
    }//GEN-LAST:event_menuGuardarComoActionPerformed

    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        // TODO add your handling code here:
        File file = new File(path);
        FileWriter writer = null;
        try {
            writer = new FileWriter(file);
            writer.write(textArea.getText());

            guardado = true;
            text = textArea.getText();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error al intentar guardar el archivo");
        } finally {
            try {
                writer.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Ocurrió un error al intentar cerrar el archivo");
            }
        }
        
        menuGuardar.setEnabled(!guardado && !path.equals(""));
        System.out.println("Guardado desde save" + guardado);
    }//GEN-LAST:event_menuGuardarActionPerformed

    private void textAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyTyped
        // TODO add your handling code here:
        if(textArea.getText().equals(text) && !text.equals("")){
            guardado = true;
        }
        else{
            guardado = false;
        }

        menuGuardar.setEnabled(!guardado && !path.equals(""));
        System.out.println("Guardado " + guardado);
    }//GEN-LAST:event_textAreaKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem menuAbrir;
    private javax.swing.JMenuItem menuAcerdaDe;
    private javax.swing.JMenuItem menuAnalizarLexico;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEjecutar;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenuItem menuGuardarComo;
    private javax.swing.JMenuItem menuNuevo;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JScrollPane spComentarios;
    private javax.swing.JTable tablaResultados;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
